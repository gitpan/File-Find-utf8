name             = File-Find-utf8
author           = Hayo Baan <info@hayobaan.nl>
license          = Perl_5
copyright_holder = Hayo Baan
copyright_year   = 2014

; Version
[Git::NextVersion]                              ; Provide a version number by bumping the last git release tag
first_version     = 0.001                       ; First version = 0.001
version_by_branch = 0                           ; Set to 1 if doing maintenance branch
version_regexp    = ^v?([\d.]+)(?:-TRIAL)?$     ; Regexp for version format org=^v(.+)$

[OurPkgVersion]                                 ; Adds version to file (no line insertion, using our)

; Gather & Prune
[GatherDir]                                     ; Gather files to include
exclude_filename = Build.PL
exclude_filename = Makefile.PL
exclude_filename = README
exclude_filename = README.mkdn
exclude_filename = MANIFEST
prune_directory  = test_files

[ShareDir]                                      ; Add contents of directory as sharedir
dir = share

[PruneCruft]                                    ; Remove cruft

[ManifestSkip]                                  ; Skip files in MANIFEST.SKIP

; PodWeaver
[PodWeaver]                                     ; Automatically extends POD

; Distribution Files & Metadata
[ReadmeAnyFromPod]                              ; Create README from POD

[ReadmeMarkdownFromPod]                         ; Create README.mkdn from POD

[License]                                       ; Fill in License automatically

[InstallGuide]                                  ; Create an INSTALL file

[MinimumPerl]                                   ; Automatically determine minimum perl version

[AutoPrereqs]                                   ; Automatically determine prerequisites

[GitHub::Meta]                                  ; Add GitHub metadata

[MetaJSON]                                      ; Add META.json

[MetaYAML]                                      ; Add META.yaml

[MetaNoIndex]                                   ; Do not index certain dirs
dir = test_files

; Build System
[ExecDir]                                       ; Install content of directory as executables
dir = bin

[MakeMaker]                                     ; Build a Makefile.PL that uses ExtUtils::MakeMaker

[ModuleBuild]                                   ; Build a Build.PL that uses Module::Build

; Manifest
[Manifest]                                      ; Add Manifest

; Before Release Tests
[CheckChangesHasContent]                        ; Check if Changes file has content

[Git::Check]                                    ; Check git repository before releasing
allow_dirty = dist.ini
allow_dirty = Changes
allow_dirty = Build.PL
allow_dirty = Makefile.PL
allow_dirty = README
allow_dirty = README.mkdn

; Extra test (gatherdir)
[Test::Compile]                                 ; Checks if perl code compiles correctly

; Extra tests (author)
[Test::Perl::Critic]                            ; Checks Perl source code for best-practices
[Test::EOL]                                     ; Checks line endings
[Test::NoTabs]                                  ; Checks for the use of tabs

; Extra tests (release)
[Test::Version]                                 ; Checks to see if each module has the correct version set
[Test::MinimumVersion]                          ; Checks the minimum perl version
max_target_perl = 5.10
[MojibakeTests]                                 ; Checks source encoding
[Test::Kwalitee]                                ; Checks the Kwalitee
[Test::Portability]                             ; Checks portability of code
[Test::UnusedVars]                              ; Checks for unused variables

[Test::CPAN::Changes]                           ; Validation of the Changes file
[Test::DistManifest]                            ; Validation of the MANIFEST file
[Test::CPAN::Meta::JSON]                        ; Validation of the META.json file
[MetaTests]                                     ; Validation of the META.yml file

[PodSyntaxTests]                                ; Checks pod syntax
[PodCoverageTests]                              ; Checks pod coverage
[Test::Pod::LinkCheck]                          ; Checks pod links
[Test::Synopsis]                                ; Checks the pod synopsis

; Run tests
[TestRelease]                                   ; Run provided tests in /t directort before releasing

[CheckExtraTests]                               ; Run the additional tests

; Release
[ConfirmRelease]                                ; Prompt for confirmation before releasing

;[FakeRelease]                                   ; Fake release

[UploadToCPAN]                                  ; Upload release to CPAN
[SchwartzRatio]                                 ; Provide statistics

; After release
[CopyFilesFromBuild]                            ; Copy/move specific files after building them
copy = Build.PL
copy = Makefile.PL
copy = README
copy = README.mkdn

[NextRelease]                                   ; Update the next release number in the changelog
format = %-9v %{yyyy-MM-dd}d

[Git::Commit]                                   ; Commit dirty files
allow_dirty = dist.ini
allow_dirty = Changes
allow_dirty = Build.PL
allow_dirty = Makefile.PL
allow_dirty = README
allow_dirty = README.mkdn

[Git::Tag]                                      ; Tag the new version
tag_format =  v%v%t
tag_message = Released v%v

[Git::Push]                                     ; Push current branch

[GitHub::Update]                                ; Update GitHub repository info on release
metacpan = 1

[InstallRelease]                                ; Install the release
install_command = cpanm --sudo .

[Clean]                                         ; Cleanup
